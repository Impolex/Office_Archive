/*
 * This file is generated by jOOQ.
 */
package com.chelchowskidawidjan.enums;


import com.chelchowskidawidjan.Public;

import org.jooq.Catalog;
import org.jooq.EnumType;
import org.jooq.Schema;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public enum Filetype implements EnumType {

    DOC("DOC"),

    DOCX("DOCX"),

    RTF("RTF"),

    PDF("PDF"),

    WPD("WPD"),

    JPEG("JPEG"),

    PNG("PNG"),

    GIF("GIF"),

    HEIF("HEIF"),

    AAC("AAC"),

    MP3("MP3"),

    WAV("WAV"),

    AMV("AMV"),

    MPEG("MPEG"),

    FLV("FLV"),

    AVI("AVI"),

    C("C"),

    JAVA("JAVA"),

    PY("PY"),

    JS("JS"),

    TS("TS"),

    HTML("HTML"),

    ASP("ASP"),

    CSS("CSS"),

    XPS("XPS"),

    ISO("ISO"),

    RAR("RAR"),

    TAR("TAR"),

    GZ("GZ"),

    SEVENZ("SEVENZ"),

    ZIP("ZIP"),

    TXT("TXT"),

    CSV("CSV");

    private final String literal;

    private Filetype(String literal) {
        this.literal = literal;
    }

    @Override
    public Catalog getCatalog() {
        return getSchema().getCatalog();
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public String getName() {
        return "filetype";
    }

    @Override
    public String getLiteral() {
        return literal;
    }

    /**
     * Lookup a value of this EnumType by its literal. Returns
     * <code>null</code>, if no such value could be found, see {@link
     * EnumType#lookupLiteral(Class, String)}.
     */
    public static Filetype lookupLiteral(String literal) {
        return EnumType.lookupLiteral(Filetype.class, literal);
    }
}
