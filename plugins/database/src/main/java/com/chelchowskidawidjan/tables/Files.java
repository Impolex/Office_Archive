/*
 * This file is generated by jOOQ.
 */
package com.chelchowskidawidjan.tables;


import com.chelchowskidawidjan.Keys;
import com.chelchowskidawidjan.Public;
import com.chelchowskidawidjan.enums.Filetype;
import com.chelchowskidawidjan.tables.Filecomments.FilecommentsPath;
import com.chelchowskidawidjan.tables.Filepermissions.FilepermissionsPath;
import com.chelchowskidawidjan.tables.Users.UsersPath;
import com.chelchowskidawidjan.tables.records.FilesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Files extends TableImpl<FilesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.files</code>
     */
    public static final Files FILES = new Files();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilesRecord> getRecordType() {
        return FilesRecord.class;
    }

    /**
     * The column <code>public.files.uuid</code>.
     */
    public final TableField<FilesRecord, String[]> UUID = createField(DSL.name("uuid"), SQLDataType.CHAR(1).array().nullable(false), this, "");

    /**
     * The column <code>public.files.objectname</code>.
     */
    public final TableField<FilesRecord, String[]> OBJECTNAME = createField(DSL.name("objectname"), SQLDataType.CHAR(1).array().nullable(false), this, "");

    /**
     * The column <code>public.files.uploader</code>.
     */
    public final TableField<FilesRecord, String[]> UPLOADER = createField(DSL.name("uploader"), SQLDataType.CHAR(1).array().nullable(false), this, "");

    /**
     * The column <code>public.files.creationdate</code>.
     */
    public final TableField<FilesRecord, LocalDateTime> CREATIONDATE = createField(DSL.name("creationdate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.files.modificationdate</code>.
     */
    public final TableField<FilesRecord, LocalDateTime> MODIFICATIONDATE = createField(DSL.name("modificationdate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.files.filetype</code>.
     */
    public final TableField<FilesRecord, Filetype> FILETYPE = createField(DSL.name("filetype"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Filetype.class), this, "");

    private Files(Name alias, Table<FilesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Files(Name alias, Table<FilesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.files</code> table reference
     */
    public Files(String alias) {
        this(DSL.name(alias), FILES);
    }

    /**
     * Create an aliased <code>public.files</code> table reference
     */
    public Files(Name alias) {
        this(alias, FILES);
    }

    /**
     * Create a <code>public.files</code> table reference
     */
    public Files() {
        this(DSL.name("files"), null);
    }

    public <O extends Record> Files(Table<O> path, ForeignKey<O, FilesRecord> childPath, InverseForeignKey<O, FilesRecord> parentPath) {
        super(path, childPath, parentPath, FILES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FilesPath extends Files implements Path<FilesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FilesPath(Table<O> path, ForeignKey<O, FilesRecord> childPath, InverseForeignKey<O, FilesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FilesPath(Name alias, Table<FilesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FilesPath as(String alias) {
            return new FilesPath(DSL.name(alias), this);
        }

        @Override
        public FilesPath as(Name alias) {
            return new FilesPath(alias, this);
        }

        @Override
        public FilesPath as(Table<?> alias) {
            return new FilesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<FilesRecord> getPrimaryKey() {
        return Keys.FILES_PKEY;
    }

    @Override
    public List<ForeignKey<FilesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FILES__FILES_UPLOADER_FKEY);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.FILES__FILES_UPLOADER_FKEY, null);

        return _users;
    }

    private transient FilecommentsPath _filecomments;

    /**
     * Get the implicit to-many join path to the
     * <code>public.filecomments</code> table
     */
    public FilecommentsPath filecomments() {
        if (_filecomments == null)
            _filecomments = new FilecommentsPath(this, null, Keys.FILECOMMENTS__FILECOMMENTS_FILE_FKEY.getInverseKey());

        return _filecomments;
    }

    private transient FilepermissionsPath _filepermissions;

    /**
     * Get the implicit to-many join path to the
     * <code>public.filepermissions</code> table
     */
    public FilepermissionsPath filepermissions() {
        if (_filepermissions == null)
            _filepermissions = new FilepermissionsPath(this, null, Keys.FILEPERMISSIONS__FILEPERMISSIONS_FILE_FKEY.getInverseKey());

        return _filepermissions;
    }

    @Override
    public Files as(String alias) {
        return new Files(DSL.name(alias), this);
    }

    @Override
    public Files as(Name alias) {
        return new Files(alias, this);
    }

    @Override
    public Files as(Table<?> alias) {
        return new Files(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Files rename(String name) {
        return new Files(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Files rename(Name name) {
        return new Files(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Files rename(Table<?> name) {
        return new Files(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files where(Condition condition) {
        return new Files(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Files where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Files where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Files where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Files where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Files whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
