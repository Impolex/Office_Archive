/*
 * This file is generated by jOOQ.
 */
package com.chelchowskidawidjan.generated.tables;


import com.chelchowskidawidjan.generated.Keys;
import com.chelchowskidawidjan.generated.Public;
import com.chelchowskidawidjan.generated.enums.Permissions;
import com.chelchowskidawidjan.generated.tables.Files.FilesPath;
import com.chelchowskidawidjan.generated.tables.Users.UsersPath;
import com.chelchowskidawidjan.generated.tables.records.FilepermissionsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Filepermissions extends TableImpl<FilepermissionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.filepermissions</code>
     */
    public static final Filepermissions FILEPERMISSIONS = new Filepermissions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FilepermissionsRecord> getRecordType() {
        return FilepermissionsRecord.class;
    }

    /**
     * The column <code>public.filepermissions.user</code>.
     */
    public final TableField<FilepermissionsRecord, String[]> USER = createField(DSL.name("user"), SQLDataType.CHAR(1).array().nullable(false), this, "");

    /**
     * The column <code>public.filepermissions.file</code>.
     */
    public final TableField<FilepermissionsRecord, String[]> FILE = createField(DSL.name("file"), SQLDataType.CHAR(1).array().nullable(false), this, "");

    /**
     * The column <code>public.filepermissions.permission</code>.
     */
    public final TableField<FilepermissionsRecord, Permissions> PERMISSION = createField(DSL.name("permission"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Permissions.class), this, "");

    private Filepermissions(Name alias, Table<FilepermissionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Filepermissions(Name alias, Table<FilepermissionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.filepermissions</code> table reference
     */
    public Filepermissions(String alias) {
        this(DSL.name(alias), FILEPERMISSIONS);
    }

    /**
     * Create an aliased <code>public.filepermissions</code> table reference
     */
    public Filepermissions(Name alias) {
        this(alias, FILEPERMISSIONS);
    }

    /**
     * Create a <code>public.filepermissions</code> table reference
     */
    public Filepermissions() {
        this(DSL.name("filepermissions"), null);
    }

    public <O extends Record> Filepermissions(Table<O> path, ForeignKey<O, FilepermissionsRecord> childPath, InverseForeignKey<O, FilepermissionsRecord> parentPath) {
        super(path, childPath, parentPath, FILEPERMISSIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class FilepermissionsPath extends Filepermissions implements Path<FilepermissionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> FilepermissionsPath(Table<O> path, ForeignKey<O, FilepermissionsRecord> childPath, InverseForeignKey<O, FilepermissionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private FilepermissionsPath(Name alias, Table<FilepermissionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public FilepermissionsPath as(String alias) {
            return new FilepermissionsPath(DSL.name(alias), this);
        }

        @Override
        public FilepermissionsPath as(Name alias) {
            return new FilepermissionsPath(alias, this);
        }

        @Override
        public FilepermissionsPath as(Table<?> alias) {
            return new FilepermissionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<FilepermissionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FILEPERMISSIONS__FILEPERMISSIONS_FILE_FKEY, Keys.FILEPERMISSIONS__FILEPERMISSIONS_USER_FKEY);
    }

    private transient FilesPath _files;

    /**
     * Get the implicit join path to the <code>public.files</code> table.
     */
    public FilesPath files() {
        if (_files == null)
            _files = new FilesPath(this, Keys.FILEPERMISSIONS__FILEPERMISSIONS_FILE_FKEY, null);

        return _files;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.FILEPERMISSIONS__FILEPERMISSIONS_USER_FKEY, null);

        return _users;
    }

    @Override
    public Filepermissions as(String alias) {
        return new Filepermissions(DSL.name(alias), this);
    }

    @Override
    public Filepermissions as(Name alias) {
        return new Filepermissions(alias, this);
    }

    @Override
    public Filepermissions as(Table<?> alias) {
        return new Filepermissions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Filepermissions rename(String name) {
        return new Filepermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Filepermissions rename(Name name) {
        return new Filepermissions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Filepermissions rename(Table<?> name) {
        return new Filepermissions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Filepermissions where(Condition condition) {
        return new Filepermissions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Filepermissions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Filepermissions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Filepermissions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Filepermissions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Filepermissions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Filepermissions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Filepermissions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Filepermissions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Filepermissions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
