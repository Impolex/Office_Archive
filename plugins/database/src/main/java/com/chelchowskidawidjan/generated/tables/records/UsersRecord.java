/*
 * This file is generated by jOOQ.
 */
package com.chelchowskidawidjan.generated.tables.records;


import com.chelchowskidawidjan.generated.tables.Users;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.users.uuid</code>.
     */
    public void setUuid(String[] value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.users.uuid</code>.
     */
    public String[] getUuid() {
        return (String[]) get(0);
    }

    /**
     * Setter for <code>public.users.objectname</code>.
     */
    public void setObjectname(String[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.users.objectname</code>.
     */
    public String[] getObjectname() {
        return (String[]) get(1);
    }

    /**
     * Setter for <code>public.users.passwordhash</code>.
     */
    public void setPasswordhash(String[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.users.passwordhash</code>.
     */
    public String[] getPasswordhash() {
        return (String[]) get(2);
    }

    /**
     * Setter for <code>public.users.isadmin</code>.
     */
    public void setIsadmin(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.users.isadmin</code>.
     */
    public Boolean getIsadmin() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.users.passwordsalt</code>.
     */
    public void setPasswordsalt(String[] value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.users.passwordsalt</code>.
     */
    public String[] getPasswordsalt() {
        return (String[]) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String[]> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(String[] uuid, String[] objectname, String[] passwordhash, Boolean isadmin, String[] passwordsalt) {
        super(Users.USERS);

        setUuid(uuid);
        setObjectname(objectname);
        setPasswordhash(passwordhash);
        setIsadmin(isadmin);
        setPasswordsalt(passwordsalt);
        resetTouchedOnNotNull();
    }
}
