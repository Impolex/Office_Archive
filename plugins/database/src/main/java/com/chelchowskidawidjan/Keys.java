/*
 * This file is generated by jOOQ.
 */
package com.chelchowskidawidjan;


import com.chelchowskidawidjan.tables.Filecomments;
import com.chelchowskidawidjan.tables.Filepermissions;
import com.chelchowskidawidjan.tables.Files;
import com.chelchowskidawidjan.tables.Users;
import com.chelchowskidawidjan.tables.records.FilecommentsRecord;
import com.chelchowskidawidjan.tables.records.FilepermissionsRecord;
import com.chelchowskidawidjan.tables.records.FilesRecord;
import com.chelchowskidawidjan.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.QOM.ForeignKeyRule;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FilecommentsRecord> FILECOMMENTS_PKEY = Internal.createUniqueKey(Filecomments.FILECOMMENTS, DSL.name("filecomments_pkey"), new TableField[] { Filecomments.FILECOMMENTS.UUID }, true);
    public static final UniqueKey<FilesRecord> FILES_PKEY = Internal.createUniqueKey(Files.FILES, DSL.name("files_pkey"), new TableField[] { Files.FILES.UUID }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.UUID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FilecommentsRecord, UsersRecord> FILECOMMENTS__FILECOMMENTS_AUTHOR_FKEY = Internal.createForeignKey(Filecomments.FILECOMMENTS, DSL.name("filecomments_author_fkey"), new TableField[] { Filecomments.FILECOMMENTS.AUTHOR }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<FilecommentsRecord, FilesRecord> FILECOMMENTS__FILECOMMENTS_FILE_FKEY = Internal.createForeignKey(Filecomments.FILECOMMENTS, DSL.name("filecomments_file_fkey"), new TableField[] { Filecomments.FILECOMMENTS.FILE }, Keys.FILES_PKEY, new TableField[] { Files.FILES.UUID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<FilepermissionsRecord, FilesRecord> FILEPERMISSIONS__FILEPERMISSIONS_FILE_FKEY = Internal.createForeignKey(Filepermissions.FILEPERMISSIONS, DSL.name("filepermissions_file_fkey"), new TableField[] { Filepermissions.FILEPERMISSIONS.FILE }, Keys.FILES_PKEY, new TableField[] { Files.FILES.UUID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<FilepermissionsRecord, UsersRecord> FILEPERMISSIONS__FILEPERMISSIONS_USER_FKEY = Internal.createForeignKey(Filepermissions.FILEPERMISSIONS, DSL.name("filepermissions_user_fkey"), new TableField[] { Filepermissions.FILEPERMISSIONS.USER }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
    public static final ForeignKey<FilesRecord, UsersRecord> FILES__FILES_UPLOADER_FKEY = Internal.createForeignKey(Files.FILES, DSL.name("files_uploader_fkey"), new TableField[] { Files.FILES.UPLOADER }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION);
}
